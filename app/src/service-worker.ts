/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

const color = '#3aa757';

chrome.runtime.onInstalled.addListener(() => {
  chrome.storage.sync.set({ color });
  console.log('default background color set to %cgreen', `color:${color}`)
})


declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
chrome.runtime.onInstalled.addListener((instalationDetails:chrome.runtime.InstalledDetails) => {
  if (instalationDetails.reason === chrome.runtime.OnInstalledReason.INSTALL) {
    chrome.tabs.create({
      url: 'onboarding.html'
    });
  }
});


const ownUrl = 'https://testurl';
const defaultHost = 'http://localhost';

chrome.runtime.onInstalled.addListener((details) =>{
  if (details.reason === "install") {
    //handle a first install
    chrome.tabs.create({ url: `${ownUrl}/next.html` });
  } else if (details.reason === "update") {
    //handle an update
    chrome.tabs.create({ url: `${ownUrl}/updates.html` });
  }
  chrome.storage.sync.set({ownApi: { host: defaultHost, isURL: true } });
});

const suggestion: chrome.omnibox.Suggestion = {
  description: "Let's try this!"
};
chrome.omnibox.setDefaultSuggestion(suggestion)


// here might need to get ready for the search operation
chrome.omnibox.onInputStarted.addListener(() => {

})

chrome.omnibox.onInputChanged.addListener((text: string ) => {
  const r1: chrome.omnibox.SuggestResult = {
    content: "",
    description: ""
  };
  const results: chrome.omnibox.SuggestResult[] = [r1];
  return results;
})


// This event is fired with the user accepts the input in the omnibox.
chrome.omnibox.onInputEntered.addListener((text:string) => {
  // todo read this as a path and start it
  // if special characters, might redirect to extension special page
});

chrome.runtime.onMessageExternal.addListener(
  function (request, sender, sendResponse) {
    chrome.storage.sync.get("ownApi", function (data) {
      if (data.axapi.isURL) {
        sendResponse({
          message: "No API key",
          success: false
        });
      } else {
        sendResponse({
          key: data.axapi.host,
          message: "Found API key",
          success: true
        });
      }
    });
  });
